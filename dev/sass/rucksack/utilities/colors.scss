@charset "utf-8";

/* =============================================================================================
   UTILITIES -> COLORS
   ============================================================================================= */

// Misc
$color-variant-type-increase-percentage: 3%;

// Palette maps
$base-color-palette: ();
$feedback-color-palette: ();
$font-color-palette: ();

// Base colors
$base-colors: (
    // Brand
    'brand': #2d98da,

    // Backgrounds
    'background': hsla(0, 0%, 99%, 1),

    // Black and white
    'black': hsla(0, 0%, 0%, 1),
    'white': hsla(0, 100%, 100%, 1),

    // Colors
    'blue': hsla(196, 85%, 57%, 1),
    'brown': hsla(24, 44%, 45%, 1),
    'charcoal': hsla(0, 0%, 23%, 1),
    'emerald': hsla(140, 52%, 55%, 1),
    'green': hsla(101, 55%, 60%, 1),
    'grey': hsla(0, 0%, 47%, 1),
    'indigo': hsla(225, 57%, 47%, 1),
    'orange': hsla(34, 100%, 61%, 1),
    'pink': hsla(309, 96%, 79%, 1),
    'purple': hsla(285, 58%, 64%, 1),
    'red': hsla(11, 85%, 57%, 1),
    'silver': hsla(0, 0%, 86%, 1),
    'slate': hsla(210, 20%, 33%, 1),
    'teal': hsla(174, 94%, 32%, 1),
    'yellow': hsla(63, 100%, 75%, 1)
);

// Cycle through all the base colors
@each $name, $color in $base-colors {
    // Create a generated color palette map
    $generated: (
        'lighten-10': lighten($color, ($color-variant-type-increase-percentage * 10)),
        'lighten-9': lighten($color, ($color-variant-type-increase-percentage * 9)),
        'lighten-8': lighten($color, ($color-variant-type-increase-percentage * 8)),
        'lighten-7': lighten($color, ($color-variant-type-increase-percentage * 7)),
        'lighten-6': lighten($color, ($color-variant-type-increase-percentage * 6)),
        'lighten-5': lighten($color, ($color-variant-type-increase-percentage * 5)),
        'lighten-4': lighten($color, ($color-variant-type-increase-percentage * 4)),
        'lighten-3': lighten($color, ($color-variant-type-increase-percentage * 3)),
        'lighten-2': lighten($color, ($color-variant-type-increase-percentage * 2)),
        'lighten-1': lighten($color, ($color-variant-type-increase-percentage * 1)),
        'base': $color,
        'darken-1': darken($color, ($color-variant-type-increase-percentage * 1)),
        'darken-2': darken($color, ($color-variant-type-increase-percentage * 2)),
        'darken-3': darken($color, ($color-variant-type-increase-percentage * 3)),
        'darken-4': darken($color, ($color-variant-type-increase-percentage * 4)),
        'darken-5': darken($color, ($color-variant-type-increase-percentage * 5)),
        'darken-6': darken($color, ($color-variant-type-increase-percentage * 6)),
        'darken-7': darken($color, ($color-variant-type-increase-percentage * 7)),
        'darken-8': darken($color, ($color-variant-type-increase-percentage * 8)),
        'darken-9': darken($color, ($color-variant-type-increase-percentage * 9)),
        'darken-10': darken($color, ($color-variant-type-increase-percentage * 10))
    );

    // Merge the generated color palette map with the base color palette map
    $base-color-palette: map-merge($base-color-palette, ($name: $generated));
}

// Font colors
$font-colors: (
    'dark': hsla(0, 0%, 13%, 1),
    'default': hsla(0, 0%, 34%, 1),
    'light': hsla(0, 0%, 91%, 1),
);

// Cycle through all the font colors
@each $name, $color in $font-colors {
    // Create a generated color palette map
    $generated: (
        'lighten-10': lighten($color, ($color-variant-type-increase-percentage * 10)),
        'lighten-9': lighten($color, ($color-variant-type-increase-percentage * 9)),
        'lighten-8': lighten($color, ($color-variant-type-increase-percentage * 8)),
        'lighten-7': lighten($color, ($color-variant-type-increase-percentage * 7)),
        'lighten-6': lighten($color, ($color-variant-type-increase-percentage * 6)),
        'lighten-5': lighten($color, ($color-variant-type-increase-percentage * 5)),
        'lighten-4': lighten($color, ($color-variant-type-increase-percentage * 4)),
        'lighten-3': lighten($color, ($color-variant-type-increase-percentage * 3)),
        'lighten-2': lighten($color, ($color-variant-type-increase-percentage * 2)),
        'lighten-1': lighten($color, ($color-variant-type-increase-percentage * 1)),
        'base': $color,
        'darken-1': darken($color, ($color-variant-type-increase-percentage * 1)),
        'darken-2': darken($color, ($color-variant-type-increase-percentage * 2)),
        'darken-3': darken($color, ($color-variant-type-increase-percentage * 3)),
        'darken-4': darken($color, ($color-variant-type-increase-percentage * 4)),
        'darken-5': darken($color, ($color-variant-type-increase-percentage * 5)),
        'darken-6': darken($color, ($color-variant-type-increase-percentage * 6)),
        'darken-7': darken($color, ($color-variant-type-increase-percentage * 7)),
        'darken-8': darken($color, ($color-variant-type-increase-percentage * 8)),
        'darken-9': darken($color, ($color-variant-type-increase-percentage * 9)),
        'darken-10': darken($color, ($color-variant-type-increase-percentage * 10))
    );

    // Merge the generated color palette map with the font color palette map
    $font-color-palette: map-merge($font-color-palette, ($name: $generated));
}

// Feedback colors
$feedback-colors: (
    'info': map-get($base-colors, 'blue'),
    'success': map-get($base-colors, 'green'),
    'warning': map-get($base-colors, 'orange'),
    'error': map-get($base-colors, 'red'),
);


// Cycle through all the feedback colors
@each $name, $color in $feedback-colors {
    // Create a generated color palette map
    $generated: (
        'lighten-10': lighten($color, ($color-variant-type-increase-percentage * 10)),
        'lighten-9': lighten($color, ($color-variant-type-increase-percentage * 9)),
        'lighten-8': lighten($color, ($color-variant-type-increase-percentage * 8)),
        'lighten-7': lighten($color, ($color-variant-type-increase-percentage * 7)),
        'lighten-6': lighten($color, ($color-variant-type-increase-percentage * 6)),
        'lighten-5': lighten($color, ($color-variant-type-increase-percentage * 5)),
        'lighten-4': lighten($color, ($color-variant-type-increase-percentage * 4)),
        'lighten-3': lighten($color, ($color-variant-type-increase-percentage * 3)),
        'lighten-2': lighten($color, ($color-variant-type-increase-percentage * 2)),
        'lighten-1': lighten($color, ($color-variant-type-increase-percentage * 1)),
        'base': $color,
        'darken-1': darken($color, ($color-variant-type-increase-percentage * 1)),
        'darken-2': darken($color, ($color-variant-type-increase-percentage * 2)),
        'darken-3': darken($color, ($color-variant-type-increase-percentage * 3)),
        'darken-4': darken($color, ($color-variant-type-increase-percentage * 4)),
        'darken-5': darken($color, ($color-variant-type-increase-percentage * 5)),
        'darken-6': darken($color, ($color-variant-type-increase-percentage * 6)),
        'darken-7': darken($color, ($color-variant-type-increase-percentage * 7)),
        'darken-8': darken($color, ($color-variant-type-increase-percentage * 8)),
        'darken-9': darken($color, ($color-variant-type-increase-percentage * 9)),
        'darken-10': darken($color, ($color-variant-type-increase-percentage * 10))
    );

    // Merge the generated color palette map with the feedback color palette map
    $feedback-color-palette: map-merge($feedback-color-palette, ($name: $generated));
}
