@charset "utf-8";

/*  =========================================================================
    JUICE -> ELEMENTS -> BUTTON -> VARIABLES
    ========================================================================= */

// Button shorthand types
$button: "
    button,
    .button,
    a.button,
    input[type=submit],
    input[type=reset],
    input[type=button]
" !default;

// Button
$button-background-color: base-color('slate') !default;
$button-background-color-active: base-color('slate', $background-color-palette-type-active) !default;
$button-background-color-hover: base-color('slate', $background-color-palette-type-hover) !default;
$button-border-color: base-color('slate', $border-color-palette-type) !default;
$button-border-color-active: base-color('slate', $border-color-palette-type-active) !default;
$button-border-color-hover: base-color('slate', $border-color-palette-type-hover) !default;
$button-border-radius-bottom-left: $border-radius-bottom-left !default;
$button-border-radius-bottom-right: $border-radius-bottom-right !default;
$button-border-radius-top-left: $border-radius-top-left !default;
$button-border-radius-top-right: $border-radius-top-right !default;
$button-border-style: $border-style !default;
$button-border-width-bottom: $border-width-bottom !default;
$button-border-width-left: $border-width-left !default;
$button-border-width-right: $border-width-right !default;
$button-border-width-top: $border-width-top !default;
$button-border-width-divider: $border-width-divider !default;
$button-component--background-color: transparent !default;
$button-component--background-color-active: hsla(0, 0, 0, 0.12) !default;
$button-component--background-color-focus: hsla(0, 0, 0, 0.04) !default;
$button-component--background-color-hover: hsla(0, 0, 0, 0.08) !default;
$button-component--border-color: transparent !default;
$button-component--border-color-active:  transparent !default;
$button-component--border-color-focus: transparent !default;
$button-component--border-color-hover: transparent !default;
$button-component--font-color: inherit !default;
$button-component--font-color-active: inherit !default;
$button-component--font-color-focus: inherit !default;
$button-component--font-color-hover: inherit !default;
$button-component--opacity: 0.3 !default;
$button-component--opacity-active: 0.9 !default;
$button-component--opacity-hover: 0.6 !default;
$button-component--opacity-focus: 0.6 !default;
$button-content-spacing: $content-spacing !default;
$button-content-spacing-small: $content-spacing-small !default;
$button-content-spacing-large: $content-spacing-large !default;
$button-content-spacing-huge: $content-spacing-huge !default;
$button-element-spacing: $element-spacing !default;
$button-element-spacing-small: $element-spacing-small !default;
$button-element-spacing-large: $element-spacing-large !default;
$button-element-spacing-huge: $element-spacing-huge !default;
$button-font-color: base-color('slate', 'invert') !default;
$button-font-color-hover: base-color('slate', 'invert') !default;
$button-font-color-active: base-color('slate', 'invert') !default;
$button-font-family: $secondary-typeface !default;
$button-font-size: $font-size !default;
$button-font-size-small: $font-size-small !default;
$button-font-size-large: $font-size-large !default;
$button-font-size-huge: $font-size-huge !default;
$button-font-variant: normal !default;
$button-font-weight: 300 !default;
$button-height: $input-height !default;
$button-height-small: $input-height-small !default;
$button-height-large: $input-height-large !default;
$button-height-huge: $input-height-huge !default;
$button-letter-spacing: 0 !default;
$button-static-background-color: base-color('white') !default;
$button-static-border-color: base-color('white', $border-color-palette-type) !default;
$button-static-font-color: base-color('white', 'invert') !default;
$button-text-transform: uppercase !default;


/*  =========================================================================
    JUICE -> ELEMENTS -> BUTTON -> MIXINS
    ========================================================================= */

// Small button size
@mixin button-size-small() {
    font-size: $button-font-size-small;
    height: $button-height-small;
    line-height: $button-height-small - ($button-border-width-top + $button-border-width-bottom);
    margin-bottom: $button-element-spacing-small;
    padding: 0 $button-content-spacing-small;
}

// Large button size
@mixin button-size-large() {
    font-size: $button-font-size-large;
    height: $button-height-large;
    line-height: $button-height-large - ($button-border-width-top + $button-border-width-bottom);
    margin-bottom: $button-element-spacing-large;
    padding: 0 $button-content-spacing-large;
}

// Huge button size
@mixin button-size-huge() {
    font-size: $button-font-size-huge;
    height: $button-height-huge;
    line-height: $button-height-huge - ($button-border-width-top + $button-border-width-bottom);
    margin-bottom: $button-element-spacing-huge;
    padding: 0 $button-content-spacing-huge;
}

// Standard icon button size
@mixin icon-button-size() {
    max-width: $button-height;
    min-width: $button-height;
    padding: 0;
    width: $button-height;
}

// Small icon button size
@mixin icon-button-size-small() {
    max-width: $button-height-small;
    min-width: $button-height-small;
    padding: 0;
    width: $button-height-small;
}

// Large icon button size
@mixin icon-button-size-large() {
    max-width: $button-height-large;
    min-width: $button-height-large;
    padding: 0;
    width: $button-height-large;
}

// Huge icon button size
@mixin icon-button-size-huge() {
    max-width: $button-height-huge;
    min-width: $button-height-huge;
    padding: 0;
    width: $button-height-huge;
}


/*  =========================================================================
    JUICE -> ELEMENTS -> BUTTON
    ========================================================================= */

#{$button} {
    align-items: center;
    background-color: $button-background-color;
    border: 0 $button-border-style $button-border-color;
    border-bottom-left-radius: $button-border-radius-bottom-left;
    border-bottom-right-radius: $button-border-radius-bottom-right;
    border-top-left-radius: $button-border-radius-top-left;
    border-top-right-radius: $button-border-radius-top-right;
    border-bottom-width: $button-border-width-bottom;
    border-left-width: $button-border-width-left;
    border-right-width: $button-border-width-right;
    border-top-width: $button-border-width-top;
    color: $button-font-color;
    cursor: pointer;
    display: inline-flex;
    font-family: $button-font-family;
    font-size: $button-font-size;
    font-variant: $button-font-variant;
    font-weight: $button-font-weight;
    height: $button-height;
    justify-content: center;
    letter-spacing: $button-letter-spacing;
    line-height: $button-height - ($button-border-width-top + $button-border-width-bottom);
    margin: 0;
    margin-bottom: $button-element-spacing;
    max-width: 100%;
    outline: none;
    padding: 0 $button-content-spacing;
    position: relative;
    text-align: center;
    text-decoration: none;
    text-transform: $button-text-transform;
    user-select: none;
    white-space: nowrap;
    z-index: get-stack-index('default');

    // Pseudo classes
    &:hover {
        background-color: $button-background-color-hover;
        border-color: $button-border-color-hover;
        color: $button-font-color-hover;
    }

    &:focus {
        box-shadow: set-focus-box-shadow($button-background-color);
        z-index: get-stack-index('focus');
    }

    &:active {
        background-color: $button-background-color-active;
        border-color: $button-border-color-active;
        color: $button-font-color-active;
        z-index: get-stack-index('active');
    }

    // Modifiers: State hooks
    &.is-static {
        background-color: $button-static-background-color;
        border-color: $button-static-border-color;
        box-shadow: none;
        color: $button-static-font-color;
        pointer-events: none;
    }

    &[disabled],
    &.is-disabled {
        @include disabled();
        background-color: $button-background-color !important;
        border-color: $button-border-color !important;
        color: $button-font-color !important;
    }

    // Modifiers: Sizes
    &.is-small {
        @include button-size-small();

        // Nested selectors
        &.button--icon {
            @include icon-button-size-small();
        }
    }

    &.is-large {
        @include button-size-large();

        // Nested selectors
        &.button--icon {
            @include icon-button-size-large();
        }
    }

    &.is-huge {
        @include button-size-huge();

        // Nested selectors
        &.button--icon {
            @include icon-button-size-huge();
        }
    }

    // Modifiers: Base colors
    @each $name, $color in $base-colors {
        &.is-#{$name} {
            background-color: base-color($name);
            border-color: base-color($name, $border-color-palette-type);
            color: base-color($name, 'invert');

            // Pseudo classes
            &:hover {
                background-color: base-color($name, $background-color-palette-type-hover);
                border-color: base-color($name, $border-color-palette-type-hover);
                color: base-color($name, 'invert');
            }

            &:focus {
                box-shadow: set-focus-box-shadow(base-color($name));
            }

            &:active {
                background-color: base-color($name, $background-color-palette-type-active);
                border-color: base-color($name, $border-color-palette-type-active);
                color: base-color($name, 'invert');
            }

            // Modifiers: State hooks
            &[disabled],
            &.is-disabled {
                background-color: base-color($name, $background-color-palette-type) !important;
                border-color: base-color($name, $border-color-palette-type) !important;
                color: base-color($name, 'invert') !important;
            }

            // Modifiers
            &.button--flat {
                background-color: transparent;
                border-color: transparent;
                color: base-color($name);

                // Pseudo classes
                &:hover {
                    background-color: transparentize(base-color($name), 0.95);
                    color: base-color($name);
                }

                &:focus {
                    background-color: transparentize(base-color($name), 0.9);
                    box-shadow: none;
                }

                &:active {
                    background-color: transparentize(base-color($name), 0.85);
                    color: base-color($name, $background-color-palette-type-active);
                }

                // Modifiers: State hooks
                &[disabled],
                &.is-disabled {
                    background-color: transparent !important;
                    border-color: transparent !important;
                    color: base-color($name) !important;
                }
            }

            &.button--outline {
                background-color: transparent;
                border-color: base-color($name);
                color: base-color($name);

                // Pseudo classes
                &:hover {
                    background-color: base-color($name);
                    border-color: base-color($name);
                    color: base-color($name, 'invert');
                }

                &:active {
                    background-color: base-color($name, $background-color-palette-type-active);
                    border-color: base-color($name, $background-color-palette-type-active);
                    color: base-color($name, 'invert');
                }

                // Modifiers: State hooks
                &[disabled],
                &.is-disabled {
                    background-color: transparent !important;
                    border-color: base-color($name) !important;
                    color: base-color($name) !important;
                }
            }
        }
    }

    // Modifiers: Feedback colors
    @each $name, $color in $feedback-colors {
        &.has-#{$name} {
            background-color: feedback-color($name);
            border-color: feedback-color($name, $border-color-palette-type);
            color: feedback-color($name, 'invert');

            // Pseudo classes
            &:hover {
                background-color: feedback-color($name, $background-color-palette-type-hover);
                border-color: feedback-color($name, $border-color-palette-type-hover);
                color: feedback-color($name, 'invert');
            }

            &:focus {
                box-shadow: set-focus-box-shadow(feedback-color($name));
            }

            &:active {
                background-color: feedback-color($name, $background-color-palette-type-active);
                border-color: feedback-color($name, $border-color-palette-type-active);
                color: feedback-color($name, 'invert');
            }

            // Modifiers: State hooks
            &[disabled],
            &.is-disabled {
                background-color: feedback-color($name, $background-color-palette-type) !important;
                border-color: feedback-color($name, $border-color-palette-type) !important;
                color: feedback-color($name, 'invert') !important;
            }

            // Modifiers
            &.button--flat {
                background-color: transparent;
                border-color: transparent;
                color: feedback-color($name);

                // Pseudo classes
                &:hover {
                    background-color: transparentize(feedback-color($name), 0.95);
                    color: feedback-color($name);
                }

                &:focus {
                    background-color: transparentize(feedback-color($name), 0.9);
                    box-shadow: none;
                }

                &:active {
                    background-color: transparentize(feedback-color($name), 0.85);
                    color: feedback-color($name, $background-color-palette-type-active);
                }

                // Modifiers: State hooks
                &[disabled],
                &.is-disabled {
                    background-color: transparent !important;
                    border-color: transparent !important;
                    color: feedback-color($name) !important;
                }
            }

            &.button--outline {
                background-color: transparent;
                border-color: feedback-color($name);
                color: feedback-color($name);

                // Pseudo classes
                &:hover {
                    background-color: feedback-color($name);
                    border-color: feedback-color($name);
                    color: feedback-color($name, 'invert');
                }

                &:active {
                    background-color: feedback-color($name, $background-color-palette-type-active);
                    border-color: feedback-color($name, $background-color-palette-type-active);
                    color: feedback-color($name, 'invert');
                }

                // Modifiers: State hooks
                &[disabled],
                &.is-disabled {
                    background-color: transparent !important;
                    border-color: feedback-color($name) !important;
                    color: feedback-color($name) !important;
                }
            }
        }
    }

    // Modifiers
    &.button--block {
        display: flex;
        width: 100%;
    }

    &.button--flat {
        background-color: transparent;
        border-color: transparent;
        color: $button-background-color;

        // Pseudo classes
        &:hover {
            background-color: transparentize($button-background-color, 0.95);
            color: $button-background-color;
        }

        &:focus {
            background-color: transparentize($button-background-color, 0.9);
            box-shadow: none;
        }

        &:active {
            background-color: transparentize($button-background-color, 0.85);
            color: $button-background-color-active;
        }

        // Modifiers: State hooks
        &[disabled],
        &.is-disabled {
            background-color: transparent !important;
            border-color: transparent !important;
            color: $button-background-color !important;
        }
    }

    &.button--icon {
        @include icon-button-size();
    }

    &.button--outline {
        background-color: transparent;
        border-color: $button-background-color;
        color: $button-background-color;

        // Pseudo classes
        &:hover {
            background-color: $button-background-color;
            border-color: $button-background-color;
            color: $button-font-color;
        }

        &:active {
            background-color: $button-background-color-active;
            border-color: $button-background-color-active;
            color: $button-font-color;
        }

        // Modifiers: State hooks
        &[disabled],
        &.is-disabled {
            background-color: transparent !important;
            border-color: $button-background-color !important;
            color: $button-background-color !important;
        }
    }

    &.button--pill {
        border-radius: 999px;
    }

    &.button--round {
        border-radius: 100%;
    }

    &.button--component {
        background-color: $button-component--background-color;
        border-color: $button-component--border-color;
        color: $button-component--font-color;
        opacity: $button-component--opacity;

        // Pseudo classes
        &:focus {
            background-color: $button-component--background-color-focus;
            border-color: $button-component--border-color-focus;
            box-shadow: none;
            color: $button-component--font-color-focus;
            opacity: $button-component--opacity-focus;
        }

        &:hover {
            background-color: $button-component--background-color-hover;
            border-color: $button-component--border-color-hover;
            color: $button-component--font-color-hover;
            opacity: $button-component--opacity-hover;
        }

        &:active {
            background-color: $button-component--background-color-active;
            border-color: $button-component--border-color-active;
            color: $button-component--font-color-active;
            opacity: $button-component--opacity-active;
        }

        // Modifiers: State hooks
        &[disabled],
        &.is-disabled {
            background-color: $button-component--background-color !important;
            border-color: $button-component--border-color !important;
            color: $button-component--font-color !important;
            opacity: $button-component--opacity !important;
        }
    }

    // Nested selectors
    .button__icon {
        margin: 0 ($button-content-spacing / 2);

        // Pseudo classes
        &:first-child:not(:only-child) {
            margin-left: -($button-content-spacing / 4);
        }

        &:last-child:not(:only-child) {
            margin-right: -($button-content-spacing / 4);
        }
    }
}


/*  =========================================================================
    JUICE -> ELEMENTS -> BUTTON GROUP
    ========================================================================= */

.button-group {
    display: inline-flex;
    margin-bottom: $button-element-spacing;

    // Modifiers: Sizes
    &.is-small {
        margin-bottom: $button-element-spacing-small;

        // Modifiers
        &.button-group--icons {
            // Nested selectors
            #{$button} {
                @include icon-button-size-small();
            }
        }

        // Nested selectors
        #{$button} {
            @include button-size-small();
            margin-bottom: 0;
        }
    }

    &.is-large {
        margin-bottom: $button-element-spacing-large;

        // Modifiers
        &.button-group--icons {
            // Nested selectors
            #{$button} {
                @include icon-button-size-large();
            }
        }

        // Nested selectors
        #{$button} {
            @include button-size-large();
            margin-bottom: 0;
        }
    }

    &.is-huge {
        margin-bottom: $button-element-spacing-huge;

        // Modifiers
        &.button-group--icons {
            // Nested selectors
            #{$button} {
                @include icon-button-size-huge();
            }
        }

        // Nested selectors
        #{$button} {
            @include button-size-huge();
            margin-bottom: 0;
        }
    }

    // Modifiers: Base colors
    @each $name, $color in $base-colors {
        &.is-#{$name} {
            // Modifiers
            &.button-group--flat {
                // Nested selectors
                #{$button} {
                    background-color: transparent;
                    border-color: transparent;
                    color: base-color($name);

                    // Pseudo classes
                    &:hover {
                        background-color: transparentize(base-color($name), 0.95);
                        color: base-color($name);
                    }

                    &:focus {
                        background-color: transparentize(base-color($name), 0.9);
                        box-shadow: none;
                    }

                    &:active {
                        background-color: transparentize(base-color($name), 0.85);
                        color: base-color($name, $background-color-palette-type-active);
                    }
                }
            }

            &.button-group--outline {
                // Nested selectors
                #{$button} {
                    background-color: transparent;
                    border-color: base-color($name);
                    color: base-color($name);

                    // Pseudo classes
                    &:hover {
                        background-color: base-color($name);
                        border-color: base-color($name);
                        color: base-color($name, 'invert');
                    }

                    &:active {
                        background-color: base-color($name, $background-color-palette-type-active);
                        border-color: base-color($name, $background-color-palette-type-active);
                        color: base-color($name, 'invert');
                    }
                }
            }

            // Nested selectors
            #{$button} {
                background-color: base-color($name);
                border-color: base-color($name, $border-color-palette-type);
                color: base-color($name, 'invert');

                // Pseudo classes
                &:hover {
                    background-color: base-color($name, $background-color-palette-type-hover);
                    border-color: base-color($name, $border-color-palette-type-hover);
                    color: base-color($name, 'invert');
                }

                &:focus {
                    box-shadow: set-focus-box-shadow(base-color($name));
                }

                &:active {
                    background-color: base-color($name, $background-color-palette-type-active);
                    border-color: base-color($name, $border-color-palette-type-active);
                    color: base-color($name, 'invert');
                }
            }
        }
    }

    // Modifiers: Feedback colors
    @each $name, $color in $feedback-colors {
        &.has-#{$name} {
            // Modifiers
            &.button-group--flat {
                // Nested selectors
                #{$button} {
                    background-color: transparent;
                    border-color: transparent;
                    color: feedback-color($name);

                    // Pseudo classes
                    &:hover {
                        background-color: transparentize(feedback-color($name), 0.95);
                        color: feedback-color($name);
                    }

                    &:focus {
                        background-color: transparentize(feedback-color($name), 0.9);
                        box-shadow: none;
                    }

                    &:active {
                        background-color: transparentize(feedback-color($name), 0.85);
                        color: feedback-color($name, $background-color-palette-type-active);
                    }
                }
            }

            &.button-group--outline {
                // Nested selectors
                #{$button} {
                    background-color: transparent;
                    border-color: feedback-color($name);
                    color: feedback-color($name);

                    // Pseudo classes
                    &:hover {
                        background-color: feedback-color($name);
                        border-color: feedback-color($name);
                        color: feedback-color($name, 'invert');
                    }

                    &:active {
                        background-color: feedback-color($name, $background-color-palette-type-active);
                        border-color: feedback-color($name, $background-color-palette-type-active);
                        color: feedback-color($name, 'invert');
                    }
                }
            }

            // Nested selectors
            #{$button} {
                background-color: feedback-color($name);
                border-color: feedback-color($name, $border-color-palette-type);
                color: feedback-color($name, 'invert');

                // Pseudo classes
                &:hover {
                    background-color: feedback-color($name, $background-color-palette-type-hover);
                    border-color: feedback-color($name, $border-color-palette-type-hover);
                    color: feedback-color($name, 'invert');
                }

                &:focus {
                    box-shadow: set-focus-box-shadow(feedback-color($name));
                }

                &:active {
                    background-color: feedback-color($name, $background-color-palette-type-active);
                    border-color: feedback-color($name, $border-color-palette-type-active);
                    color: feedback-color($name, 'invert');
                }
            }
        }
    }

    // Modifiers
    &.button-group--block {
        display: flex;

        // Nested selectors
        #{$button} {
            flex-grow: 1;
        }
    }

    &.button-group--flat {
        // Nested selectors
        #{$button} {
            background-color: transparent;
            border-color: transparent;
            color: $button-background-color;

            // Pseudo classes
            &:hover {
                background-color: transparentize($button-background-color, 0.95);
                color: $button-background-color;
            }

            &:focus {
                background-color: transparentize($button-background-color, 0.9);
                box-shadow: none;
            }

            &:active {
                background-color: transparentize($button-background-color, 0.85);
                color: $button-background-color-active;
            }
        }
    }

    &.button-group--icons {
        // Nested selectors
        #{$button} {
            @include icon-button-size();
        }
    }

    &.button-group--outline {
        // Nested selectors
        #{$button} {
            background-color: transparent;
            border-color: $button-background-color;
            color: $button-background-color;

            // Pseudo classes
            &:hover {
                background-color: $button-background-color;
                border-color: $button-background-color;
                color: $button-font-color;
            }

            &:active {
                background-color: $button-background-color-active;
                border-color: $button-background-color-active;
                color: $button-font-color;
            }
        }
    }

    &.button-group--pill {
        // Nested selectors
        #{$button} {
            // Pseudo classes
            &:first-child {
                border-bottom-left-radius: 999px;
                border-top-left-radius: 999px;
            }

            &:last-child {
                border-bottom-right-radius: 999px;
                border-top-right-radius: 999px;
            }
        }
    }

    // Nested selectors
    #{$button} {
        margin-bottom: 0;

        // Pseudo classes
        &:not(:only-child) {
            border-left-width: $button-border-width-divider;
            border-radius: 0;
            border-right-width: $button-border-width-divider;
            margin-right: -$button-border-width-divider;
        }

        &:first-child {
            border-bottom-left-radius: $button-border-radius-bottom-left;
            border-left-width: $button-border-width-left;
            border-top-left-radius: $button-border-radius-top-left;
        }

        &:last-child {
            border-bottom-right-radius: $button-border-radius-bottom-right;
            border-right-width: $button-border-width-right;
            border-top-right-radius: $button-border-radius-top-right;
            margin-right: 0;
        }
    }
}
