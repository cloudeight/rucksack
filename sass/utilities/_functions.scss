@charset "utf-8";

/* =============================================================================================
   RUCKSACK -> UTILITIES -> FUNCTIONS
   ============================================================================================= */

/**
 *  Get a color or a color variant from a palette
 *  @param  string  $palette  The palette name
 *  @param  string  $color    The color in the palette
 *  @param  string  $type     The color variant type
 *  @return mixed             The color value, null otherwise
 *  @example
    .selector {
        property: get-color($base-color-palette, 'red', 'darken-1');
    }
 */
@function get-color($palette, $color, $type) {
    // Check if the color exists in the palette AND check if the variant type exists in the color
    @if map-has-key($palette, $color) and map-has-key(map-get($palette, $color), $type) {
        // Return the color
        @return map-get(map-get($palette, $color), $type);
    }

    // Display a warning
    @warn 'Unknown palette, color and type [#{$palette}, #{$color}, #{$type}]';

    // Return null
    @return null;
}

/**
 *  Get a base color or a base color variant from the base colors palette
 *  @param  string  $color  The color name in the palette
 *  @param  string  $type   The color variant type
 *  @return mixed           The color value, null otherwise
 *  @example
    .selector {
        property: base-color('red', 'darken-1');
    }
 */
@function base-color($color, $type: 'base') {
    // Return the color value
    @return get-color($base-color-palette, $color, $type);
}

/**
 *  Get a font color or a font color variant from the font colors palette
 *  @param  string  $color  The color name in the palette
 *  @param  string  $type   The color variant type
 *  @return mixed           The color value, null otherwise
 *  @example
    .selector {
        property: font-color('dark', 'darken-1');
    }
 */
@function font-color($color: 'default', $type: 'base') {
    // Return the color value
    @return get-color($font-color-palette, $color, $type);
}

/**
 *  Get a feedback color or a feedback color variant from the feedback colors palette
 *  @param  string  $color  The color name in the palette
 *  @param  string  $type   The color variant type
 *  @return mixed           The color value, null otherwise
 *  @example
    .selector {
        property: feedback-color('error', 'darken-1');
    }
 */
@function feedback-color($color, $type: 'base') {
    // Return the color value
    @return get-color($feedback-color-palette, $color, $type);
}
