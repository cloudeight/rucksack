@charset "utf-8";

/*  ========================================================================
    JUICE -> UTILITIES -> FUNCTIONS
    ========================================================================  */

/**
 *  Get a color or a color variant from a palette.
 *  @param  {string}  $palette  The palette name.
 *  @param  {string}  $color    The color in the palette.
 *  @param  {string}  $type     The color variant type.
 *  @return {mixed}             The color value, null otherwise.
 */
@function get-color($palette, $color, $type) {
    // Check if the color exists in the palette AND check if the variant type exists in the color
    @if map-has-key($palette, $color) and map-has-key(map-get($palette, $color), $type) {
        // Return the color
        @return map-get(map-get($palette, $color), $type);
    }

    // Display a warning
    @warn 'Unknown palette, color and type [#{$palette}, #{$color}, #{$type}]';

    // Return null
    @return null;
}

/**
 *  Get a base color or a base color variant from the base colors palette.
 *  @param  {string}  $color  The color name in the palette.
 *  @param  {string}  $type   The color variant type.
 *  @return {mixed}           The color value, null otherwise.
 */
@function base-color($color, $type: 'base') {
    // Return the color value, null otherwise
    @return get-color($base-color-palette, $color, $type);
}

/**
 *  Get a font color or a font color variant from the font colors palette.
 *  @param  {string}  $color  The color name in the palette.
 *  @param  {string}  $type   The color variant type.
 *  @return {mixed}           The color value, null otherwise.
 */
@function font-color($color: 'default', $type: 'base') {
    // Return the color value
    @return get-color($font-color-palette, $color, $type);
}

/**
 *  Get a feedback color or a feedback color variant from the feedback colors palette.
 *  @param  {string}  $color  The color name in the palette.
 *  @param  {string}  $type   The color variant type.
 *  @return {mixed}           The color value, null otherwise.
 */
@function feedback-color($color, $type: 'base') {
    // Return the color value
    @return get-color($feedback-color-palette, $color, $type);
}

/**
 * Set the invert color for fonts depending on the background color.
 * @param  {string}  $background-color  The background color.
 * @param  {string}  $font-dark         The dark font color to return.
 * @param  {string}  $font-light        The light font color to return.
 * @return {string}                     The font color.
 */
@function set-invert-font-color($background-color, $font-color-dark: hsla(0, 0, 0, 0.65), $font-color-light: hsla(0, 100%, 100%, 1)) {
    // Check if the background colors lightness is more than 65
    @if (lightness($background-color) > 65) {
        // Return the dark font color
        @return $font-color-dark;
    } @else {
        // Return the light font color
        @return $font-color-light;
    }
}

/**
 * Get the z-index value from the stack index map/array.
 * @param  {string}  $element  The element in the stack index.
 * @return {int}               The z-index value, null otherwise.
 */
@function get-stack-index($element) {
    // Check if the element exists in the stack index
    @if map-has-key($stack-index, $element) {
        // Return the stack index value
        @return map-get($stack-index, $element);
    }

    // Display a warning
    @warn 'Unknown element "#{$element}" in stack-index map';

    // Return null
    @return null;
}

/**
 * Set the box shadow for focused elements using the base custom focus variables.
 * @param  {string}  $color  The base color name.
 * @return {string}          The transparentized base color box-shadow value.
 */
@function set-focus-box-shadow($color) {
    // Return the transparentized base color box-shadow value
    @return $custom-focus-box-shadow-values transparentize($color, $custom-focus-box-shadow-transparentize);
}
