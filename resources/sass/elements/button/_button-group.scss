@charset 'utf-8';

/*  ========================================================================
    JUICE -> ELEMENTS -> BUTTON -> BUTTON GROUP
    ========================================================================  */

.button-group {
    // Variables
    --element-spacing: var(--default-element-spacing);

    // Styles
    display: inline-flex;
    margin-bottom: var(--element-spacing);

    // Modifiers: State hooks
    &.is-fullwidth {
        display: flex;

        // Nested selectors
        #{$button} {
            flex-grow: 1;
        }
    }

    // Check if the button group size modifiers should be declared
    @if $button-group-size-modifiers {
        // Cycle through all of the sizes
        @each $size in $sizes {
            // Modifiers: Sizes
            &.is-#{$size} {
                // Nested selectors
                #{$button} {
                    // Variables
                    --font-size: var(--default-font-size-#{$size});
                    --height: var(--default-element-height-#{$size});
                    --content-spacing: calc(var(--default-content-spacing-#{$size}) / 1.5);
                }
            }

            // Check if the button size modifier breakpoints should be declared
            @if $button-size-modifier-breakpoints {
                // Cycle through all of the breakpoints
                @each $breakpoint-name, $breakpoint in $breakpoints {
                    // Breakpoint
                    @include breakpoint($breakpoint-name) {
                        // Modifiers: Size
                        &.is-#{$size}\@#{$breakpoint-name} {
                            // Nested selectors
                            #{$button} {
                                // Variables
                                --font-size: var(--default-font-size-#{$size});
                                --height: var(--default-element-height-#{$size});
                                --content-spacing: calc(var(--default-content-spacing-#{$size}) / 1.5);
                            }
                        }
                    }
                }
            }
        }
    }

    // Check if the button group color modifiers should be declared
    @if $button-group-color-modifiers {
        // Cycle through all of the colors
        @each $color-name, $color in $colors {
            // Modifiers: Colors
            &.is-#{$color-name} {
                // Nested selectors
                #{$button} {
                    // Variables
                    --accessibility-focus-color: var(--color-#{$color-name}-accessibility-focus);
                    --background-color: var(--color-#{$color-name});
                    --border-color: var(--color-#{$color-name}-darken-3);
                    --font-color: var(--color-#{$color-name}-inverted-text);

                    // Pseudo classes
                    &:hover {
                        // Variables
                        --background-color: var(--color-#{$color-name}-lighten-1);
                        --border-color: var(--color-#{$color-name}-darken-6);
                        --font-color: var(--color-#{$color-name}-inverted-text);
                    }

                    &:active {
                        // Variables
                        --background-color: var(--color-#{$color-name}-darken-1);
                        --border-color: var(--color-#{$color-name}-darken-8);
                        --font-color: var(--color-#{$color-name}-inverted-text);
                    }
                }
            }
        }
    }

    // Check if the button feedback modifiers should be declared
    @if $button-group-feedback-modifiers {
        // Cycle through all of the feedback colors
        @each $feedback-name, $color in $feedback-colors {
            // Modifiers: Feedback colors
            &.has-#{$feedback-name} {
                // Nested selectors
                #{$button} {
                    // Variables
                    --accessibility-focus-color: var(--feedback-color-#{$feedback-name}-accessibility-focus);
                    --background-color: var(--feedback-color-#{$feedback-name});
                    --border-color: var(--feedback-color-#{$feedback-name}-darken-3);
                    --font-color: var(--feedback-color-#{$feedback-name}-inverted-text);

                    // Pseudo classes
                    &:hover {
                        // Variables
                        --background-color: var(--feedback-color-#{$feedback-name}-lighten-1);
                        --border-color: var(--feedback-color-#{$feedback-name}-darken-6);
                        --font-color: var(--feedback-color-#{$feedback-name}-inverted-text);
                    }

                    &:active {
                        // Variables
                        --background-color: var(--feedback-color-#{$feedback-name}-darken-1);
                        --border-color: var(--feedback-color-#{$feedback-name}-darken-8);
                        --font-color: var(--feedback-color-#{$feedback-name}-inverted-text);
                    }
                }
            }
        }
    }

    // Check if the button group flat modifier should be declared
    @if $button-group-flat-modifier {
        // Modifiers
        &.button-group--flat {
            // Nested selectors
            #{$button} {
                // Variables
                --font-color: var(--background-color);

                // Styles
                background-color: transparent;
                border-color: transparent;
                box-shadow: none;
                margin: 0 !important;

                // Pseudo classes
                &:hover,
                &:focus {
                    background-color: hsla(0, 0%, 30%, 0.08);
                }

                &:hover {
                    // Variables
                    --font-color: var(--background-color);
                }

                &:active {
                    background-color: hsla(0, 0%, 30%, 0.08);
                }

                // Modifiers: Props
                &[disabled] {
                    background-color: transparent !important;
                    border-color: transparent !important;
                    color: var(--font-color) !important;
                }
            }
        }
    }

    // Check if the button group icon modifier should be declared
    @if $button-group-icon-modifier {
        &.button-group--icons {
            // Nested selectors
            #{$button} {
                max-width: var(--height);
                min-width: var(--height);
                padding: 0;
                width: var(--height);
            }
        }
    }

    // Check if the button group outline modifier should be declared
    @if $button-group-outline-modifier {
        &.button-group--outline {
            // Nested selectors
            #{$button} {
                background-color: transparent;
                border-color: var(--background-color);
                color: var(--background-color);

                // Pseudo classes
                &:hover {
                    background-color: var(--background-color);
                    border-color: var(--background-color);
                    color: var(--font-color);
                }

                // Modifiers: Props
                &[disabled] {
                    background-color: var(--font-color) !important;
                    border-color: var(--background-color) !important;
                    color: var(--background-color) !important;
                }
            }
        }
    }

    // Check if the button group pill modifier should be declared
    @if $button-group-pill-modifier {
        &.button-group--pill {
            // Nested selectors
            #{$button} {
                // Pseudo classes
                &:first-child {
                    border-bottom-left-radius: 999px;
                    border-top-left-radius: 999px;
                }

                &:last-child {
                    border-bottom-right-radius: 999px;
                    border-top-right-radius: 999px;
                }
            }
        }
    }

    // Nested selectors
    #{$button} {
        margin-bottom: 0;

        // Pseudo classes
        &:not(:only-child) {
            border-left-width: var(--border-width-divider);
            border-radius: 0;
            border-right-width: var(--border-width-divider);
            margin-right: calc(0px - var(--border-width-divider));
        }

        &:first-child {
            border-bottom-left-radius: var(--border-radius-bottom-left);
            border-left-width: var(--border-width-left);
            border-top-left-radius: var(--border-radius-top-left);
        }

        &:last-child {
            border-bottom-right-radius: var(--border-radius-bottom-right);
            border-right-width: var(--border-width-right);
            border-top-right-radius: var(--border-radius-top-right);
            margin-right: 0;
        }
    }
}
