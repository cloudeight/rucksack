@charset 'utf-8';

// Check if the elements with button group should be imported
@if $import-elements and $import-element-button-group {
    .button-group {
        display: inline-flex;
        margin-bottom: element-spacing();

        // Check if the button group fullwidth modifier should be declared
        @if $button-fullwidth-modifier {
            // Modifiers: State hooks
            &.is-fullwidth {
                display: flex;

                // Nested selectors
                #{$button} {
                    flex-grow: 1;
                }
            }
        }

        // Check if the button group size modifiers should be declared
        @if $button-group-size-modifiers {
            // Cycle through all of the sizes
            @each $size in $sizes {
                // Modifiers: Sizes
                &.is-#{$size} {
                    // Check if the button group icon modifier should be declared
                    @if $button-group-icon-modifier {
                        // Modifiers
                        &.button-group--icons {
                            // Nested selectors
                            #{$button} {
                                max-width: element-height(map($button-element-height-multipliers, $size));
                                min-width: element-height(map($button-element-height-multipliers, $size));
                                width: element-height(map($button-element-height-multipliers, $size));
                            }
                        }
                    }

                    // Nested selectors
                    #{$button} {
                        font-size: map($button-font-sizes, $size);
                        height: element-height(map($button-element-height-multipliers, $size));
                        padding: 0 content-spacing(map($button-content-spacing-multipliers, $size));
                    }
                }

                // Check if the button size modifiers with breakpoints should be declared
                @if $button-size-modifiers-with-breakpoints {
                    // Cycle through all of the breakpoints
                    @each $breakpoint-name, $breakpoint-value in $breakpoints {
                        // Breakpoints
                        @include breakpoint($breakpoint-name) {
                            // Modifiers: Sizes
                            &.is-#{$size}\@#{$breakpoint-name} {
                                // Check if the button group icon modifier should be declared
                                @if $button-group-icon-modifier {
                                    // Modifiers
                                    &.button-group--icons {
                                        // Nested selectors
                                        #{$button} {
                                            max-width: element-height(map($button-element-height-multipliers, $size));
                                            min-width: element-height(map($button-element-height-multipliers, $size));
                                            width: element-height(map($button-element-height-multipliers, $size));
                                        }
                                    }
                                }

                                // Nested selectors
                                #{$button} {
                                    font-size: map($button-font-sizes, $size);
                                    height: element-height(map($button-element-height-multipliers, $size));
                                    padding: 0 content-spacing(map($button-content-spacing-multipliers, $size));
                                }
                            }
                        }
                    }
                }
            }
        }

        // Check if the button group base color modifiers should be declared
        @if $button-group-color-modifiers {
            // Cycle through all of the button colors
            @each $button-color in $button-colors {
                // Modifiers: Base colors
                &.is-#{$button-color} {
                    // Nested selectors
                    #{$button} {
                        background-color: base-color($button-color);
                        border-color: base-color('#{$button-color}-darken-3');
                        color: base-color('#{$button-color}-text');

                        // Pseudo classes
                        &:hover {
                            background-color: base-color('#{$button-color}-lighten-1');
                            border-color: base-color('#{$button-color}-darken-4');
                            color: base-color('#{$button-color}-text');
                        }

                        &:focus {
                            background-color: base-color('#{$button-color}-lighten-1');
                            border-color: base-color('#{$button-color}-darken-4');
                            box-shadow: 0 0 0 $button-accessibility-focus-width base-color('#{$button-color}-accessibility-focus');
                            color: base-color('#{$button-color}-text');
                        }

                        &:active {
                            background-color: base-color('#{$button-color}-darken-1');
                            border-color: base-color('#{$button-color}-darken-6');
                            color: base-color('#{$button-color}-text');
                        }

                        // Modifiers: Props
                        &[disabled] {
                            @include disabled();
                            background-color: base-color($button-color) !important;
                            border-color: base-color('#{$button-color}-darken-3') !important;
                            color: base-color('#{$button-color}-text') !important;
                        }
                    }

                    // Check if the button group outline modifier should be declared
                    @if $button-group-outline-modifier {
                        // Modifiers
                        &.button-group--outline {
                            // Nested selectors
                            #{$button} {
                                background-color: transparent;
                                border-color: base-color($button-color);
                                color: base-color($button-color);

                                // Pseudo classes
                                &:hover {
                                    background-color: base-color($button-color);
                                    border-color: base-color($button-color);
                                    color: base-color('#{$button-color}-text');
                                }

                                &:focus {
                                    background-color: base-color($button-color);
                                    border-color: base-color($button-color);
                                    box-shadow: 0 0 0 $button-accessibility-focus-width base-color('#{$button-color}-accessibility-focus');
                                    color: base-color('#{$button-color}-text');
                                }

                                &:active {
                                    background-color: base-color('#{$button-color}-darken-1');
                                    border-color: base-color('#{$button-color}-darken-1');
                                    color: base-color('#{$button-color}-text');
                                }

                                // Modifiers: Props
                                &[disabled] {
                                    @include disabled();
                                    background-color: transparent !important;
                                    border-color: base-color($button-color) !important;
                                    color: base-color($button-color) !important;
                                }
                            }
                        }
                    }
                }
            }
        }

        // Check if the button group component modifier should be declared
        @if $button-group-component-modifier {
            // Modifiers
            &.button-group--components {
                margin-bottom: 0;

                // Nested selectors
                #{$button} {
                    background-color: transparent !important;
                    border-color: transparent !important;
                    box-shadow: none !important;
                    color: inherit !important;
                    margin: 0 !important;
                    opacity: 0.3 !important;
                    padding: 0;

                    // Pseudo classes
                    &:hover {
                        background-color: hsla(0, 0, 0, 0.08) !important;
                        border-color: transparent !important;
                        color: inherit !important;
                        opacity: 0.6 !important;
                    }

                    &:focus {
                        background-color: hsla(0, 0, 0, 0.04) !important;
                        border-color: transparent !important;
                        color: inherit !important;
                        opacity: 0.6 !important;
                    }

                    &:active {
                        background-color: hsla(0, 0, 0, 0.12) !important;
                        border-color: transparent !important;
                        color: inherit !important;
                        opacity: 0.9 !important;
                    }

                    // Modifiers: Props
                    &[disabled] {
                        @include disabled();
                        background-color: transparent !important;
                        border-color: transparent !important;
                        color: inherit !important;
                        opacity: 0.3 !important;
                    }
                }
            }
        }

        // Check if the button group icon modifier should be declared
        @if $button-group-icon-modifier {
            // Modifiers
            &.button-group--icons {
                // Nested selectors
                #{$button} {
                    max-width: element-height(map($button-element-height-multipliers, 'medium'));
                    min-width: element-height(map($button-element-height-multipliers, 'medium'));
                    padding: 0;
                    width: element-height(map($button-element-height-multipliers, 'medium'));
                }
            }
        }

        // Check if the button group outline modifier should be declared
        @if $button-group-outline-modifier {
            &.button-group--outline {
                // Nested selectors
                #{$button} {
                    background-color: transparent;
                    border-color: $button-background-color;
                    color: $button-background-color;

                    // Pseudo classes
                    &:hover {
                        background-color: $button-background-color;
                        border-color: $button-background-color;
                        color: $button-font-color;
                    }

                    &:focus {
                        background-color: $button-background-color-focus;
                        border-color: $button-background-color-focus;
                        color: $button-font-color-focus;
                    }

                    &:active {
                        background-color: $button-background-color-active;
                        border-color: $button-background-color-active;
                        color: $button-font-color-active;
                    }

                    // Modifiers: Props
                    &[disabled] {
                        @include disabled();
                        background-color: transparent !important;
                        border-color: $button-background-color !important;
                        color: $button-background-color !important;
                    }
                }
            }
        }

        // Check if the button group pill modifier should be declared
        @if $button-group-pill-modifier {
            // Modifiers
            &.button-group--pill {
                // Nested selectors
                #{$button} {
                    // Pseudo classes
                    &:first-child {
                        border-bottom-left-radius: 999px;
                        border-top-left-radius: 999px;
                    }

                    &:last-child {
                        border-bottom-right-radius: 999px;
                        border-top-right-radius: 999px;
                    }
                }
            }
        }

        // Nested selectors
        #{$button} {
            border-radius: 0;
            margin-bottom: 0;

            // Pseudo classes
            &:not(:only-child) {
                border-left-width: $button-border-width-divider;
                border-right-width: $button-border-width-divider;
                margin-right: (0 - $button-border-width-divider);
            }

            &:first-child {
                border-bottom-left-radius: $button-border-radius-bottom-left;
                border-left-width: $button-border-width-left;
                border-top-left-radius: $button-border-radius-top-left;
            }

            &:last-child {
                border-bottom-right-radius: $button-border-radius-bottom-right;
                border-right-width: $button-border-width-right;
                border-top-right-radius: $button-border-radius-top-right;
                margin-right: 0;
            }
        }
    }
}
