@charset 'utf-8';

// Check if the elements with button should be imported
@if $import-elements and $import-element-button {
    #{$button} {
        align-items: center;
        background-color: $button-background-color;
        border: 0 $button-border-style $button-border-color;
        border-bottom-left-radius: $button-border-radius-bottom-left;
        border-bottom-right-radius: $button-border-radius-bottom-right;
        border-bottom-width: $button-border-width-bottom;
        border-left-width: $button-border-width-left;
        border-right-width: $button-border-width-right;
        border-top-left-radius: $button-border-radius-top-left;
        border-top-right-radius: $button-border-radius-top-right;
        border-top-width: $button-border-width-top;
        color: $button-font-color;
        cursor: pointer;
        display: inline-flex;
        font-family: $button-font-family;
        font-size: map($button-font-sizes, 'medium');
        font-variant: $button-font-variant;
        font-weight: $button-font-weight;
        height: element-height(map($button-element-height-multipliers, 'medium'));
        justify-content: center;
        letter-spacing: $button-letter-spacing;
        margin-bottom: element-spacing();
        max-width: 100%;
        outline: none;
        padding: 0 content-spacing(map($button-content-spacing-multipliers, 'medium'));
        position: relative;
        text-align: center;
        text-decoration: none;
        text-transform: $button-text-transform;
        user-select: none;
        white-space: nowrap;
        z-index: stack-index('default');

        // Pseudo classes
        &:hover,
        &:focus,
        &:active {
            text-decoration: none;
        }

        &:hover {
            background-color: $button-background-color-hover;
            border-color: $button-border-color-hover;
            color: $button-font-color-hover;
            z-index: stack-index('hover');
        }

        &:focus {
            background-color: $button-background-color-focus;
            border-color: $button-border-color-focus;
            box-shadow: 0 0 0 $button-accessibility-focus-width $button-accessibility-focus-color;
            color: $button-font-color-focus;
            z-index: stack-index('focus');
        }

        &:active {
            background-color: $button-background-color-active;
            border-color: $button-border-color-active;
            color: $button-font-color-active;
            z-index: stack-index('active');
        }

        // Modifiers: Props
        &[disabled] {
            @include disabled();
        }

        // Check if the button static modifier should be declared
        @if $button-static-modifier {
            // Modifiers: State hooks
            &.is-static {
                box-shadow: none !important;
                pointer-events: none !important;
                z-index: stack-index('static') !important;
            }
        }

        // Check if the button fullwidth modifier should be declared
        @if $button-fullwidth-modifier {
            // Modifiers: State hooks
            &.is-fullwidth {
                display: flex;
                width: 100%;
            }
        }

        // Check if the button size modifiers should be declared
        @if $button-size-modifiers {
            // Cycle through all of the sizes
            @each $size in $sizes {
                // Modifiers: Sizes
                &.is-#{$size} {
                    font-size: map($button-font-sizes, $size);
                    height: element-height(map($button-element-height-multipliers, $size));
                    padding: 0 content-spacing(map($button-content-spacing-multipliers, $size));

                    // Check if the button icon modifier should be declared
                    @if $button-icon-modifier {
                        // Modifiers
                        &.button--icon {
                            max-width: element-height(map($button-element-height-multipliers, $size));
                            min-width: element-height(map($button-element-height-multipliers, $size));
                            width: element-height(map($button-element-height-multipliers, $size));
                        }
                    }
                }

                // Check if the button size modifiers with breakpoints should be declared
                @if $button-size-modifiers-with-breakpoints {
                    // Cycle through all of the breakpoints
                    @each $breakpoint-name, $breakpoint-value in $breakpoints {
                        // Breakpoints
                        @include breakpoint($breakpoint-name) {
                            // Modifiers: Sizes
                            &.is-#{$size}\@#{$breakpoint-name} {
                                font-size: map($button-font-sizes, $size);
                                height: element-height(map($button-element-height-multipliers, $size));
                                padding: 0 content-spacing(map($button-content-spacing-multipliers, $size));

                                // Check if the button icon modifier should be declared
                                @if $button-icon-modifier {
                                    // Modifiers
                                    &.button--icon {
                                        max-width: element-height(map($button-element-height-multipliers, $size));
                                        min-width: element-height(map($button-element-height-multipliers, $size));
                                        width: element-height(map($button-element-height-multipliers, $size));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // Check if the button color modifiers should be declared
        @if $button-color-modifiers {
            // Cycle through all of the button colors
            @each $button-color in $button-colors {
                // Modifiers: Base colors
                &.is-#{$button-color} {
                    background-color: base-color($button-color);
                    border-color: base-color('#{$button-color}-darken-3');
                    color: base-color('#{$button-color}-text');

                    // Pseudo classes
                    &:hover {
                        background-color: base-color('#{$button-color}-lighten-1');
                        border-color: base-color('#{$button-color}-darken-4');
                        color: base-color('#{$button-color}-text');
                    }

                    &:focus {
                        background-color: base-color('#{$button-color}-lighten-1');
                        border-color: base-color('#{$button-color}-darken-4');
                        box-shadow: 0 0 0 $button-accessibility-focus-width base-color('#{$button-color}-accessibility-focus');
                        color: base-color('#{$button-color}-text');
                    }

                    &:active {
                        background-color: base-color('#{$button-color}-darken-1');
                        border-color: base-color('#{$button-color}-darken-6');
                        color: base-color('#{$button-color}-text');
                    }

                    // Check if the button outline modifier should be declared
                    @if $button-outline-modifier {
                        // Modifiers
                        &.button--outline {
                            background-color: transparent;
                            border-color: base-color($button-color);
                            color: base-color($button-color);

                            // Pseudo classes
                            &:hover {
                                background-color: base-color($button-color);
                                border-color: base-color($button-color);
                                color: base-color('#{$button-color}-text');
                            }

                            &:focus {
                                background-color: base-color($button-color);
                                border-color: base-color($button-color);
                                box-shadow: 0 0 0 $button-accessibility-focus-width base-color('#{$button-color}-accessibility-focus');
                                color: base-color('#{$button-color}-text');
                            }

                            &:active {
                                background-color: base-color('#{$button-color}-darken-1');
                                border-color: base-color('#{$button-color}-darken-1');
                                color: base-color('#{$button-color}-text');
                            }
                        }
                    }
                }
            }
        }

        // Check if the button feedback modifiers should be declared
        @if $button-feedback-modifiers {
            // Cycle through all of the feedback colors
            @each $feedback-name, $feedback-value in $feedback-colors {
                // Modifiers: Feedback colors
                &.has-#{$feedback-name} {
                    background-color: feedback-color($feedback-name);
                    border-color: feedback-color('#{$feedback-name}-darken-3');
                    color: feedback-color('#{$feedback-name}-text');

                    // Pseudo classes
                    &:hover {
                        background-color: feedback-color('#{$feedback-name}-lighten-1');
                        border-color: feedback-color('#{$feedback-name}-darken-4');
                        color: feedback-color('#{$feedback-name}-text');
                    }

                    &:focus {
                        background-color: feedback-color('#{$feedback-name}-lighten-1');
                        border-color: feedback-color('#{$feedback-name}-darken-4');
                        box-shadow: 0 0 0 $button-accessibility-focus-width feedback-color('#{$feedback-name}-accessibility-focus');
                        color: feedback-color('#{$feedback-name}-text');
                    }

                    &:active {
                        background-color: feedback-color('#{$feedback-name}-darken-1');
                        border-color: feedback-color('#{$feedback-name}-darken-6');
                        color: feedback-color('#{$feedback-name}-text');
                    }

                    // Check if the button outline modifier should be declared
                    @if $button-outline-modifier {
                        // Modifiers
                        &.button--outline {
                            background-color: transparent;
                            border-color: feedback-color($feedback-name);
                            color: feedback-color($feedback-name);

                            // Pseudo classes
                            &:hover {
                                background-color: feedback-color($feedback-name);
                                border-color: feedback-color($feedback-name);
                                color: feedback-color('#{$feedback-name}-text');
                            }

                            &:focus {
                                background-color: feedback-color($feedback-name);
                                border-color: feedback-color($feedback-name);
                                box-shadow: 0 0 0 $button-accessibility-focus-width feedback-color('#{$feedback-name}-accessibility-focus');
                                color: feedback-color('#{$feedback-name}-text');
                            }

                            &:active {
                                background-color: feedback-color('#{$feedback-name}-darken-1');
                                border-color: feedback-color('#{$feedback-name}-darken-1');
                                color: feedback-color('#{$feedback-name}-text');
                            }
                        }
                    }
                }
            }
        }

        // Check if the button component modifier should be declared
        @if $button-component-modifier {
            // Modifiers
            &.button--component {
                background-color: transparent !important;
                border-color: transparent !important;
                box-shadow: none !important;
                color: inherit !important;
                margin-bottom: 0;
                opacity: 0.4 !important;

                // Pseudo classes
                &:hover {
                    background-color: hsla(0, 0, 0, 0.08) !important;
                    border-color: transparent !important;
                    color: inherit !important;
                    opacity: 0.6 !important;
                }

                &:focus {
                    background-color: hsla(0, 0, 0, 0.04) !important;
                    border-color: transparent !important;
                    color: inherit !important;
                    opacity: 0.6 !important;
                }

                &:active {
                    background-color: hsla(0, 0, 0, 0.12) !important;
                    border-color: transparent !important;
                    color: inherit !important;
                    opacity: 0.8 !important;
                }
            }
        }

        // Check if the button icon modifier should be declared
        @if $button-icon-modifier {
            // Modifiers
            &.button--icon {
                max-width: element-spacing(map($button-element-height-multipliers, 'medium'));
                min-width: element-spacing(map($button-element-height-multipliers, 'medium'));
                padding: 0;
                width: element-spacing(map($button-element-height-multipliers, 'medium'));
            }
        }

        // Check if the button outline modifier should be declared
        @if $button-outline-modifier {
            // Modifiers
            &.button--outline {
                background-color: transparent;
                border-color: $button-background-color;
                color: $button-background-color;

                // Pseudo classes
                &:hover {
                    background-color: $button-background-color;
                    border-color: $button-background-color;
                    color: $button-font-color;
                }

                &:focus {
                    background-color: $button-background-color-focus;
                    border-color: $button-background-color-focus;
                    color: $button-font-color-focus;
                }

                &:active {
                    background-color: $button-background-color-active;
                    border-color: $button-background-color-active;
                    color: $button-font-color-active;
                }
            }
        }

        // Check if the button pill modifier should be declared
        @if $button-pill-modifier {
            // Modifiers
            &.button--pill {
                border-radius: 999px;
            }
        }

        // Check if the button round modifier should be declared
        @if $button-round-modifier {
            // Modifiers
            &.button--round {
                border-radius: 100%;
            }
        }
    }
}
