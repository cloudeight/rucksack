@charset 'utf-8';

// Check if the elements with hero should be imported
@if $import-elements and $import-element-hero {
    .hero {
        background-color: $hero-background-color;
        background-position: $hero-background-position;
        background-repeat: $hero-background-repeat;
        background-size: $hero-background-size;
        color: $hero-font-color;
        display: flex;
        flex-direction: column;
        justify-content: center;
        margin-bottom: element-spacing();
        padding: content-spacing(map($hero-content-spacing-multipliers, 'medium'));

        // Check if the hero size modifiers should be declared
        @if $hero-size-modifiers {
            // Cycle through all of the sizes
            @each $size in $sizes {
                // Modifiers: Sizes
                &.is-#{$size} {
                    padding: content-spacing(map($hero-content-spacing-multipliers, $size));
                }

                // Check if the hero size modifiers with breakpoints should be declared
                @if $hero-size-modifiers-with-breakpoints {
                    // Cycle through all of the breakpoints
                    @each $breakpoint-name, $breakpoint-value in $breakpoints {
                        // Breakpoints
                        @include breakpoint($breakpoint-name) {
                            // Modifiers: Sizes
                            &.is-#{$size}\@#{$breakpoint-name} {
                                padding: content-spacing(map($hero-content-spacing-multipliers, $size));
                            }
                        }
                    }
                }
            }
        }

        // Check if the hero color modifiers should be declared
        @if $hero-color-modifiers {
            // Cycle through all of the hero colors
            @each $hero-color in $hero-colors {
                // Modifiers: Base colors
                &.is-#{$hero-color} {
                    background-color: base-color($hero-color);
                    color: base-color('#{$hero-color}-text');
                }
            }
        }

        // Check if the hero viewport modifiers should be declared
        @if $hero-viewport-modifiers {
            // Modifiers
            &.hero--25vh {
                min-height: 25vh;
            }

            &.hero--50vh {
                min-height: 50vh;
            }

            &.hero--75vh {
                min-height: 75vh;
            }

            &.hero--100vh {
                min-height: 100vh;
            }
        }

        // Check if the hero parallax modifier should be declared
        @if $hero-parallax-modifier {
            &.hero--parallax {
                background-attachment: fixed;
            }
        }

        // Nested selectors
        a:not(.button) {
            color: $hero-link-color;

            // Pseudo classes
            &:hover {
                color: $hero-link-color-hover;
            }

            &:focus {
                color: $hero-link-color-focus;
            }

            &:active {
                color: $hero-link-color-active;
            }
        }

        .hero__head,
        .hero__foot {
            flex: 0 0 auto;
        }

        .hero__body {
            align-items: center;
            display: flex;
            flex: 1 0 auto;
        }
    }
}
