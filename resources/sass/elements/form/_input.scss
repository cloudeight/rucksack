@charset 'utf-8';

/*  ========================================================================
    JUICE -> ELEMENTS -> FORM -> INPUT
    ========================================================================  */

// Check if the elements with input should be imported
@if $import-elements and $import-element-input {
    input {
        // Variables
        --accessibility-focus-width: var(--default-accessibility-focus-width);
        --accessibility-focus-color: var(--default-accessibility-focus-color);
        --background-color: var(--color-white);
        --border-color: var(--color-white-darken-3);
        --border-radius-bottom-left: var(--default-border-radius-bottom-left);
        --border-radius-bottom-right: var(--default-border-radius-bottom-right);
        --border-radius-top-left: var(--default-border-radius-top-left);
        --border-radius-top-right: var(--default-border-radius-top-right);
        --border-style: var(--default-border-style);
        --border-width-bottom: var(--default-border-width-bottom);
        --border-width-left: var(--default-border-width-left);
        --border-width-right: var(--default-border-width-right);
        --border-width-top: var(--default-border-width-top);
        --content-spacing: calc(var(--default-content-spacing) / 2);
        --element-spacing: var(--default-element-spacing);
        --font-color: var(--color-white-inverted-text);
        --font-family: var(--primary-typeface);
        --font-size: var(--default-font-size);
        --height: var(--default-element-height);

        // Styles
        align-items: center;
        background-color: var(--background-color);
        border: 0 var(--border-style) var(--border-color);
        border-bottom-left-radius: var(--border-radius-bottom-left);
        border-bottom-right-radius: var(--border-radius-bottom-right);
        border-bottom-width: var(--border-width-bottom);
        border-left-width: var(--border-width-left);
        border-top-left-radius: var(--border-radius-top-left);
        border-top-right-radius: var(--border-radius-top-right);
        border-top-width: var(--border-width-top);
        border-right-width: var(--border-width-right);
        color: var(--font-color);
        display: flex;
        font-family: var(--font-family);
        font-size: var(--font-size);
        height: var(--height);
        line-height: normal;
        margin: 0;
        margin-bottom: var(--element-spacing);
        max-width: 100%;
        padding: 0 var(--content-spacing);
        position: relative;
        outline: none;
        width: 100%;
        z-index: get-stack-index('default');

        // Pseudo classes
        &:hover {
            // Variables
            --background-color: var(--color-white-lighten-1);
            --border-color: var(--color-white-darken-6);
            --font-color: var(--color-white-inverted-text);

            // Styles
            z-index: get-stack-index('hover');

            // Styles (IE fallback for postcss-css-variables)
            background-color: var(--background-color);
            border-color: var(--border-color);
            color: var(--font-color);
        }

        &:focus {
            // Variables
            --background-color: var(--color-white);
            --border-color: var(--feedback-color-info);
            --font-color: var(--color-white-inverted-text);

            // Styles
            box-shadow: 0 0 0 var(--accessibility-focus-width) var(--accessibility-focus-color);
            z-index: get-stack-index('focus');

            // Styles (IE fallback for postcss-css-variables)
            background-color: var(--background-color);
            border-color: var(--border-color);
            color: var(--font-color);
        }

        &:active {
            // Variables
            --background-color: var(--color-white);
            --border-color: var(--feedback-color-info);
            --font-color: var(--color-white-inverted-text);

            // Styles
            box-shadow: 0 0 0 var(--accessibility-focus-width) var(--accessibility-focus-color);
            z-index: get-stack-index('active');

            // Styles (IE fallback for postcss-css-variables)
            background-color: var(--background-color);
            border-color: var(--border-color);
            color: var(--font-color);
        }

        // Pseudo elements
        &::placeholder {
            // Variables
            --font-color: var(--color-white-darken-6);

            // Styles
            color: var(--font-color);
        }

        // Check if the input size modifiers should be declared
        @if $input-size-modifiers {
            // Cycle through all of the sizes
            @each $size in $sizes {
                // Modifiers: Sizes
                &.is-#{$size} {
                    // Variables
                    --content-spacing: calc(var(--default-content-spacing-#{$size}) / 2);
                    --font-size: var(--default-font-size-#{$size});
                    --height: var(--default-element-height-#{$size});

                    // Styles (IE fallback for postcss-css-variables)
                    font-size: var(--font-size);
                    height: var(--height);
                    padding: 0 var(--content-spacing);
                }

                // Check if the input size modifier breakpoints should be declared
                @if $input-size-modifier-breakpoints {
                    // Cycle through all of the breakpoints
                    @each $breakpoint-name, $breakpoint in $breakpoints {
                        // Breakpoint
                        @include breakpoint($breakpoint-name) {
                            // Modifiers: Size
                            &.is-#{$size}\@#{$breakpoint-name} {
                                // Variables
                                --content-spacing: calc(var(--default-content-spacing-#{$size}) / 2);
                                --font-size: var(--default-font-size-#{$size});
                                --height: var(--default-element-height-#{$size});

                                // Styles (IE fallback for postcss-css-variables)
                                font-size: var(--font-size);
                                height: var(--height);
                                padding: 0 var(--content-spacing);
                            }
                        }
                    }
                }
            }
        }

        // Check if the input feedback modifiers should be declared
        @if $input-feedback-modifiers {
            // Cycle through all of the feedback colors
            @each $feedback-name, $color in $feedback-colors {
                // Modifiers: Feedback colors
                &.has-#{$feedback-name} {
                    // Variables
                    --border-color: var(--feedback-color-#{$feedback-name});

                    // Styles (IE fallback for postcss-css-variables)
                    border-color: var(--border-color);

                    // Pseudo classes
                    &:focus,
                    &:active {
                        // Variables
                        --accessibility-focus-color: var(--feedback-color-#{$feedback-name}-accessibility-focus);

                        // Styles (IE fallback for postcss-css-variables)
                        box-shadow: 0 0 0 var(--accessibility-focus-width) var(--accessibility-focus-color);
                    }

                    // Modifiers: Props
                    &[disabled] {
                        // Styles
                        border-color: var(--feedback-color-#{$feedback-name}) !important;
                    }
                }
            }
        }

        // Modifiers: Props
        &[disabled] {
            // Styles
            @include disabled();
            background-color: var(--background-color) !important;
            border-color: var(--border-color) !important;
            color: var(--font-color) !important;
        }

        // Check if the input honeypot modifier should be declared
        @if $input-honeypot-modifier {
            // Modifiers
            &.input--hp {
                // Styles
                display: none !important;
            }
        }

        // Check if the input pill modifier should be declared
        @if $input-pill-modifier {
            // Modifiers
            &.input--pill {
                // Styles
                border-radius: 999px;
            }
        }
    }

    // Checkbox and radio
    input[type=checkbox],
    input[type=radio] {
        // Styles
        cursor: pointer;
        display: inline-flex;
        height: auto;
        margin-left: 10px;
        margin-right: 10px;
        margin-top: 0;
        padding: 10px;
        position: relative;
        top: 2px;
        width: auto;
    }

    // Color
    input[type=color] {
        // Styles
        cursor: pointer;
        display: inline-flex;
        max-width: 60px;
        min-width: 60px;
        padding: 5px;

        // Pseudo elements
        &::-webkit-color-swatch-wrapper {
            // Styles
            background-color: var(--background-color);
            border-bottom-left-radius: var(--border-radius-bottom-left);
            border-bottom-right-radius: var(--border-radius-bottom-right);
            border-top-left-radius: var(--border-radius-top-left);
            border-top-right-radius: var(--border-radius-top-right);
            padding: 0;
        }

        &::-webkit-color-swatch {
            // Styles
            border: none;
            border-bottom-left-radius: var(--border-radius-bottom-left);
            border-bottom-right-radius: var(--border-radius-bottom-right);
            border-top-left-radius: var(--border-radius-top-left);
            border-top-right-radius: var(--border-radius-top-right);
        }

        // Modifiers
        &.input--pill {
            // Pseudo elements
            &::-webkit-color-swatch {
                // Styles
                border-radius: 999px;
            }
        }
    }

    // File
    input[type=file] {
        // Styles
        border: none;
        height: auto;
        padding: 0;
    }

    // Radio
    input[type=radio] {
        // Styles
        border-radius: 100%;
    }

    // Range
    input[type=range] {
        // Styles
        box-shadow: none !important;
    }
}
