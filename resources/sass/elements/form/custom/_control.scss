@charset 'utf-8';

/*  ========================================================================
    JUICE -> ELEMENTS -> FORM -> CUSTOM -> CONTROL
    ========================================================================  */

.form-control {
    // Variables
    --border-radius-bottom-left: var(--default-border-radius-bottom-left);
    --border-radius-bottom-right: var(--default-border-radius-bottom-right);
    --border-radius-top-left: var(--default-border-radius-top-left);
    --border-radius-top-right: var(--default-border-radius-top-right);
    --border-style: var(--default-border-style);
    --border-width-bottom: var(--default-border-width-bottom);
    --border-width-divider: var(--default-border-width-divider);
    --border-width-left: var(--default-border-width-left);
    --border-width-right: var(--default-border-width-right);
    --border-width-top: var(--default-border-width-top);
    --element-spacing: var(--default-element-spacing);

    // Styles
    display: flex;
    margin-bottom: var(--element-spacing);

    // Nested selectors
    #{$form-control-element} {
        border-bottom-width: var(--border-width-bottom);
        border-left-width: var(--border-width-divider);
        border-right-width: var(--border-width-divider);
        border-top-width: var(--border-width-top);
        border-style: var(--border-style);
        border-radius: 0;
        margin-right: calc(0px - var(--border-width-divider));
        margin-bottom: 0;
        width: auto;

        // Pseudo classes
        &:first-child {
            border-bottom-left-radius: var(--border-radius-bottom-left);
            border-left-width: var(--border-width-left);
            border-top-left-radius: var(--border-radius-top-left);
        }

        &:last-child {
            border-bottom-right-radius: var(--border-radius-bottom-right);
            border-right-width: var(--border-width-right);
            border-top-right-radius: var(--border-radius-top-right);
            margin-right: 0;
        }

        // Modifiers
        &.form-control__spotlight {
            flex-basis: 100%;
            width: 100%;
        }
    }

    // Check if the form control size modifiers should be declared
    @if $form-control-size-modifiers {
        // Cycle through all of the sizes
        @each $size in $sizes {
            // Modifiers: Sizes
            &.is-#{$size} {
                // Nested selectors
                input {
                    // Variables
                    --content-spacing: calc(var(--default-content-spacing-#{$size}) / 2);
                    --font-size: var(--default-font-size-#{$size});
                    --height: var(--default-element-height-#{$size});
                }

                select {
                    // Variables
                    --content-spacing: calc(var(--default-content-spacing-#{$size}) / 2);
                    --font-size: var(--default-font-size-#{$size});
                    --height: var(--default-element-height-#{$size});
                }

                textarea {
                    // Variables
                    --content-spacing: calc(var(--default-content-spacing-#{$size}) / 2);
                    --font-size: var(--default-font-size-#{$size});
                }

                #{button} {
                    // Variables
                    --font-size: var(--default-font-size-#{$size});
                    --height: var(--default-element-height-#{$size});
                    --content-spacing: calc(var(--default-content-spacing-#{$size}) / 1.5);
                }
            }

            // Check if the form control size modifier breakpoints should be declared
            @if $form-control-size-modifier-breakpoints {
                // Cycle through all of the breakpoints
                @each $breakpoint-name, $breakpoint in $breakpoints {
                    // Breakpoint
                    @include breakpoint($breakpoint-name) {
                        // Modifiers: Size
                        &.is-#{$size}\@#{$breakpoint-name} {
                            // Nested selectors
                            input {
                                // Variables
                                --content-spacing: calc(var(--default-content-spacing-#{$size}) / 2);
                                --font-size: var(--default-font-size-#{$size});
                                --height: var(--default-element-height-#{$size});
                            }

                            select {
                                // Variables
                                --content-spacing: calc(var(--default-content-spacing-#{$size}) / 2);
                                --font-size: var(--default-font-size-#{$size});
                                --height: var(--default-element-height-#{$size});
                            }

                            textarea {
                                // Variables
                                --content-spacing: calc(var(--default-content-spacing-#{$size}) / 2);
                                --font-size: var(--default-font-size-#{$size});
                            }

                            #{button} {
                                // Variables
                                --font-size: var(--default-font-size-#{$size});
                                --height: var(--default-element-height-#{$size});
                                --content-spacing: calc(var(--default-content-spacing-#{$size}) / 1.5);
                            }
                        }
                    }
                }
            }
        }
    }

    // Check if the form control feedback modifiers should be declared
    @if $form-control-feedback-modifiers {
        // Cycle through all of the feedback colors
        @each $feedback-name, $color in $feedback-colors {
            // Modifiers: Feedback colors
            &.has-#{$feedback-name} {
                // Nested selectors
                input,
                select,
                textarea {
                    // Modifiers
                    &.form-control__spotlight {
                        // Variables
                        --border-color: var(--feedback-color-#{$feedback-name});

                        // Pseudo classes
                        &:focus {
                            --accessibility-focus-color: var(--feedback-color-#{$feedback-name}-accessibility-focus);
                        }

                        &:active {
                            --accessibility-focus-color: var(--feedback-color-#{$feedback-name}-accessibility-focus);
                        }

                        // Modifiers: Props
                        &[disabled] {
                            border-color: var(--feedback-color-#{$feedback-name}) !important;
                        }
                    }
                }
            }
        }
    }
}
