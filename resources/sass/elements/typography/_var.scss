@charset 'utf-8';

/*  ========================================================================
    JUICE -> ELEMENTS -> TYPOGRAPHY -> VAR
    ========================================================================  */

// Check if the elements with var should be imported
@if $import-elements and $import-element-var {
    var {
        background-color: $var-background-color;
        border: 0 $var-border-style $var-border-color;
        border-bottom-left-radius: $var-border-radius-bottom-left;
        border-bottom-right-radius: $var-border-radius-bottom-right;
        border-bottom-width: $var-border-width-bottom;
        border-left-width: $var-border-width-left;
        border-right-width: $var-border-width-right;
        border-top-left-radius: $var-border-radius-top-left;
        border-top-right-radius: $var-border-radius-top-right;
        border-top-width: $var-border-width-top;
        color: $var-font-color;
        font-family: $var-font-family;
        font-size: $var-font-size;
        font-style: italic;
        padding: $var-content-spacing;

        // Check if the var size modifiers should be declared
        @if $var-size-modifiers {
            // Cycle through all of the sizes
            @each $size in $sizes {
                // Modifiers: Sizes
                &.is-#{$size} {
                    font-size: map-get($var-font-size-sizes, $size);
                    padding: map-get($var-content-spacing-sizes, $size);
                }

                // Check if the var size modifiers with breakpoints should be declared
                @if $var-size-modifiers-with-breakpoints {
                    // Cycle through all of the breakpoints
                    @each $breakpoint-name, $breakpoint-value in $breakpoints {
                        // Breakpoint
                        @include breakpoint($breakpoint-name) {
                            // Modifiers: Size
                            &.is-#{$size}\@#{$breakpoint-name} {
                                font-size: map-get($var-font-size-sizes, $size);
                                padding: map-get($var-content-spacing-sizes, $size);
                            }
                        }
                    }
                }
            }
        }
    }
}
